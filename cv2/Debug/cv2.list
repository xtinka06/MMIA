
cv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000468  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000528  08000528  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000528  08000528  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000528  08000528  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000528  08000528  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000528  08000528  00010528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800052c  0800052c  0001052c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000530  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000004  08000534  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08000534  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008a2  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000002e2  00000000  00000000  000208ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000a0  00000000  00000000  00020bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000078  00000000  00000000  00020c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000475c  00000000  00000000  00020cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000009fc  00000000  00000000  00025424  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00018429  00000000  00000000  00025e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003e249  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000158  00000000  00000000  0003e2c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000510 	.word	0x08000510

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08000510 	.word	0x08000510

08000108 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000108:	b590      	push	{r4, r7, lr}
 800010a:	b083      	sub	sp, #12
 800010c:	af00      	add	r7, sp, #0
 800010e:	0002      	movs	r2, r0
 8000110:	6039      	str	r1, [r7, #0]
 8000112:	1dfb      	adds	r3, r7, #7
 8000114:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 8000116:	1dfb      	adds	r3, r7, #7
 8000118:	781b      	ldrb	r3, [r3, #0]
 800011a:	2b7f      	cmp	r3, #127	; 0x7f
 800011c:	d932      	bls.n	8000184 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800011e:	4a2f      	ldr	r2, [pc, #188]	; (80001dc <NVIC_SetPriority+0xd4>)
 8000120:	1dfb      	adds	r3, r7, #7
 8000122:	781b      	ldrb	r3, [r3, #0]
 8000124:	0019      	movs	r1, r3
 8000126:	230f      	movs	r3, #15
 8000128:	400b      	ands	r3, r1
 800012a:	3b08      	subs	r3, #8
 800012c:	089b      	lsrs	r3, r3, #2
 800012e:	3306      	adds	r3, #6
 8000130:	009b      	lsls	r3, r3, #2
 8000132:	18d3      	adds	r3, r2, r3
 8000134:	3304      	adds	r3, #4
 8000136:	681b      	ldr	r3, [r3, #0]
 8000138:	1dfa      	adds	r2, r7, #7
 800013a:	7812      	ldrb	r2, [r2, #0]
 800013c:	0011      	movs	r1, r2
 800013e:	2203      	movs	r2, #3
 8000140:	400a      	ands	r2, r1
 8000142:	00d2      	lsls	r2, r2, #3
 8000144:	21ff      	movs	r1, #255	; 0xff
 8000146:	4091      	lsls	r1, r2
 8000148:	000a      	movs	r2, r1
 800014a:	43d2      	mvns	r2, r2
 800014c:	401a      	ands	r2, r3
 800014e:	0011      	movs	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8000150:	683b      	ldr	r3, [r7, #0]
 8000152:	019b      	lsls	r3, r3, #6
 8000154:	22ff      	movs	r2, #255	; 0xff
 8000156:	401a      	ands	r2, r3
 8000158:	1dfb      	adds	r3, r7, #7
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	0018      	movs	r0, r3
 800015e:	2303      	movs	r3, #3
 8000160:	4003      	ands	r3, r0
 8000162:	00db      	lsls	r3, r3, #3
 8000164:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000166:	481d      	ldr	r0, [pc, #116]	; (80001dc <NVIC_SetPriority+0xd4>)
 8000168:	1dfb      	adds	r3, r7, #7
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	001c      	movs	r4, r3
 800016e:	230f      	movs	r3, #15
 8000170:	4023      	ands	r3, r4
 8000172:	3b08      	subs	r3, #8
 8000174:	089b      	lsrs	r3, r3, #2
 8000176:	430a      	orrs	r2, r1
 8000178:	3306      	adds	r3, #6
 800017a:	009b      	lsls	r3, r3, #2
 800017c:	18c3      	adds	r3, r0, r3
 800017e:	3304      	adds	r3, #4
 8000180:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 8000182:	e027      	b.n	80001d4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000184:	4a16      	ldr	r2, [pc, #88]	; (80001e0 <NVIC_SetPriority+0xd8>)
 8000186:	1dfb      	adds	r3, r7, #7
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	b25b      	sxtb	r3, r3
 800018c:	089b      	lsrs	r3, r3, #2
 800018e:	33c0      	adds	r3, #192	; 0xc0
 8000190:	009b      	lsls	r3, r3, #2
 8000192:	589b      	ldr	r3, [r3, r2]
 8000194:	1dfa      	adds	r2, r7, #7
 8000196:	7812      	ldrb	r2, [r2, #0]
 8000198:	0011      	movs	r1, r2
 800019a:	2203      	movs	r2, #3
 800019c:	400a      	ands	r2, r1
 800019e:	00d2      	lsls	r2, r2, #3
 80001a0:	21ff      	movs	r1, #255	; 0xff
 80001a2:	4091      	lsls	r1, r2
 80001a4:	000a      	movs	r2, r1
 80001a6:	43d2      	mvns	r2, r2
 80001a8:	401a      	ands	r2, r3
 80001aa:	0011      	movs	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 80001ac:	683b      	ldr	r3, [r7, #0]
 80001ae:	019b      	lsls	r3, r3, #6
 80001b0:	22ff      	movs	r2, #255	; 0xff
 80001b2:	401a      	ands	r2, r3
 80001b4:	1dfb      	adds	r3, r7, #7
 80001b6:	781b      	ldrb	r3, [r3, #0]
 80001b8:	0018      	movs	r0, r3
 80001ba:	2303      	movs	r3, #3
 80001bc:	4003      	ands	r3, r0
 80001be:	00db      	lsls	r3, r3, #3
 80001c0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80001c2:	4807      	ldr	r0, [pc, #28]	; (80001e0 <NVIC_SetPriority+0xd8>)
 80001c4:	1dfb      	adds	r3, r7, #7
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	b25b      	sxtb	r3, r3
 80001ca:	089b      	lsrs	r3, r3, #2
 80001cc:	430a      	orrs	r2, r1
 80001ce:	33c0      	adds	r3, #192	; 0xc0
 80001d0:	009b      	lsls	r3, r3, #2
 80001d2:	501a      	str	r2, [r3, r0]
}
 80001d4:	46c0      	nop			; (mov r8, r8)
 80001d6:	46bd      	mov	sp, r7
 80001d8:	b003      	add	sp, #12
 80001da:	bd90      	pop	{r4, r7, pc}
 80001dc:	e000ed00 	.word	0xe000ed00
 80001e0:	e000e100 	.word	0xe000e100

080001e4 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	3b01      	subs	r3, #1
 80001f0:	4a0c      	ldr	r2, [pc, #48]	; (8000224 <SysTick_Config+0x40>)
 80001f2:	4293      	cmp	r3, r2
 80001f4:	d901      	bls.n	80001fa <SysTick_Config+0x16>
 80001f6:	2301      	movs	r3, #1
 80001f8:	e010      	b.n	800021c <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80001fa:	4b0b      	ldr	r3, [pc, #44]	; (8000228 <SysTick_Config+0x44>)
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	3a01      	subs	r2, #1
 8000200:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000202:	2301      	movs	r3, #1
 8000204:	425b      	negs	r3, r3
 8000206:	2103      	movs	r1, #3
 8000208:	0018      	movs	r0, r3
 800020a:	f7ff ff7d 	bl	8000108 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <SysTick_Config+0x44>)
 8000210:	2200      	movs	r2, #0
 8000212:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000214:	4b04      	ldr	r3, [pc, #16]	; (8000228 <SysTick_Config+0x44>)
 8000216:	2207      	movs	r2, #7
 8000218:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800021a:	2300      	movs	r3, #0
}
 800021c:	0018      	movs	r0, r3
 800021e:	46bd      	mov	sp, r7
 8000220:	b002      	add	sp, #8
 8000222:	bd80      	pop	{r7, pc}
 8000224:	00ffffff 	.word	0x00ffffff
 8000228:	e000e010 	.word	0xe000e010

0800022c <EXTI0_1_IRQHandler>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void EXTI0_1_IRQHandler(void)
 {
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) { // check line 0 has triggered the IT
 8000230:	4b09      	ldr	r3, [pc, #36]	; (8000258 <EXTI0_1_IRQHandler+0x2c>)
 8000232:	695b      	ldr	r3, [r3, #20]
 8000234:	2201      	movs	r2, #1
 8000236:	4013      	ands	r3, r2
 8000238:	d00b      	beq.n	8000252 <EXTI0_1_IRQHandler+0x26>
	 	 EXTI->PR |= EXTI_PR_PR0; // clear the pending bit
 800023a:	4b07      	ldr	r3, [pc, #28]	; (8000258 <EXTI0_1_IRQHandler+0x2c>)
 800023c:	695a      	ldr	r2, [r3, #20]
 800023e:	4b06      	ldr	r3, [pc, #24]	; (8000258 <EXTI0_1_IRQHandler+0x2c>)
 8000240:	2101      	movs	r1, #1
 8000242:	430a      	orrs	r2, r1
 8000244:	615a      	str	r2, [r3, #20]
	 	 GPIOB->ODR ^= (1<<4);
 8000246:	4b05      	ldr	r3, [pc, #20]	; (800025c <EXTI0_1_IRQHandler+0x30>)
 8000248:	695a      	ldr	r2, [r3, #20]
 800024a:	4b04      	ldr	r3, [pc, #16]	; (800025c <EXTI0_1_IRQHandler+0x30>)
 800024c:	2110      	movs	r1, #16
 800024e:	404a      	eors	r2, r1
 8000250:	615a      	str	r2, [r3, #20]
	}
 }
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40010400 	.word	0x40010400
 800025c:	48000400 	.word	0x48000400

08000260 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	Tick++;
 8000264:	4b03      	ldr	r3, [pc, #12]	; (8000274 <SysTick_Handler+0x14>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	1c5a      	adds	r2, r3, #1
 800026a:	4b02      	ldr	r3, [pc, #8]	; (8000274 <SysTick_Handler+0x14>)
 800026c:	601a      	str	r2, [r3, #0]
}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	20000020 	.word	0x20000020

08000278 <blikac>:


void blikac(void)
 {
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	static uint32_t delay;
	if (Tick > delay + LED_TIME_BLINK) {
 800027c:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <blikac+0x34>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	332d      	adds	r3, #45	; 0x2d
 8000282:	33ff      	adds	r3, #255	; 0xff
 8000284:	001a      	movs	r2, r3
 8000286:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <blikac+0x38>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	429a      	cmp	r2, r3
 800028c:	d20b      	bcs.n	80002a6 <blikac+0x2e>
		GPIOA->ODR ^= (1<<4) ;
 800028e:	2390      	movs	r3, #144	; 0x90
 8000290:	05db      	lsls	r3, r3, #23
 8000292:	695a      	ldr	r2, [r3, #20]
 8000294:	2390      	movs	r3, #144	; 0x90
 8000296:	05db      	lsls	r3, r3, #23
 8000298:	2110      	movs	r1, #16
 800029a:	404a      	eors	r2, r1
 800029c:	615a      	str	r2, [r3, #20]
		delay = Tick;
 800029e:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <blikac+0x38>)
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	4b02      	ldr	r3, [pc, #8]	; (80002ac <blikac+0x34>)
 80002a4:	601a      	str	r2, [r3, #0]
	}
 }
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000024 	.word	0x20000024
 80002b0:	20000020 	.word	0x20000020

080002b4 <tlacitka>:

void tlacitka (void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
	static uint32_t debounce1;
	static uint32_t debounce2; // vrozkování po 5ms
	static uint32_t off_time;


	if (Tick > debounce1 + BUTTON_DEBOUNCE) { //Tick větší jak 40ms proběhne vzorkování
 80002ba:	4b27      	ldr	r3, [pc, #156]	; (8000358 <tlacitka+0xa4>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	3328      	adds	r3, #40	; 0x28
 80002c0:	001a      	movs	r2, r3
 80002c2:	4b26      	ldr	r3, [pc, #152]	; (800035c <tlacitka+0xa8>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	429a      	cmp	r2, r3
 80002c8:	d239      	bcs.n	800033e <tlacitka+0x8a>

		static uint32_t old_s2;				//nese starý stav talčítka S2
		uint32_t new_s2 = GPIOC->IDR & (1<<0);	//automatická proměná ,která nese aktuální hodnotu tlačítka S2
 80002ca:	4b25      	ldr	r3, [pc, #148]	; (8000360 <tlacitka+0xac>)
 80002cc:	691b      	ldr	r3, [r3, #16]
 80002ce:	2201      	movs	r2, #1
 80002d0:	4013      	ands	r3, r2
 80002d2:	607b      	str	r3, [r7, #4]

		if (old_s2 && !new_s2) { // testujeme sestupnou hranu, starý stav=1 a zárověň nový stav =0
 80002d4:	4b23      	ldr	r3, [pc, #140]	; (8000364 <tlacitka+0xb0>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d00b      	beq.n	80002f4 <tlacitka+0x40>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d108      	bne.n	80002f4 <tlacitka+0x40>
			off_time = Tick + LED_TIME_SHORT;
 80002e2:	4b1e      	ldr	r3, [pc, #120]	; (800035c <tlacitka+0xa8>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	3364      	adds	r3, #100	; 0x64
 80002e8:	001a      	movs	r2, r3
 80002ea:	4b1f      	ldr	r3, [pc, #124]	; (8000368 <tlacitka+0xb4>)
 80002ec:	601a      	str	r2, [r3, #0]
			GPIOB->BSRR = (1<<0);
 80002ee:	4b1f      	ldr	r3, [pc, #124]	; (800036c <tlacitka+0xb8>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	619a      	str	r2, [r3, #24]
		}
		old_s2 = new_s2;
 80002f4:	4b1b      	ldr	r3, [pc, #108]	; (8000364 <tlacitka+0xb0>)
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	601a      	str	r2, [r3, #0]

		if (Tick > debounce2 + BUTTON_DEBOUNCE_SHORT) {
 80002fa:	4b1d      	ldr	r3, [pc, #116]	; (8000370 <tlacitka+0xbc>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	1d5a      	adds	r2, r3, #5
 8000300:	4b16      	ldr	r3, [pc, #88]	; (800035c <tlacitka+0xa8>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	429a      	cmp	r2, r3
 8000306:	d21a      	bcs.n	800033e <tlacitka+0x8a>
			static uint16_t debounce = 0xFFFF;		//a proč je v návodě 0x7FFF???

			debounce <<=1;
 8000308:	4b1a      	ldr	r3, [pc, #104]	; (8000374 <tlacitka+0xc0>)
 800030a:	881b      	ldrh	r3, [r3, #0]
 800030c:	18db      	adds	r3, r3, r3
 800030e:	b29a      	uxth	r2, r3
 8000310:	4b18      	ldr	r3, [pc, #96]	; (8000374 <tlacitka+0xc0>)
 8000312:	801a      	strh	r2, [r3, #0]
			if (GPIOC->IDR & (1<<1)) debounce |= 0x0001;		//zlož na nejniší bit 1, zůstane vše kromě nejnižšího
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <tlacitka+0xac>)
 8000316:	691b      	ldr	r3, [r3, #16]
 8000318:	2202      	movs	r2, #2
 800031a:	4013      	ands	r3, r2
 800031c:	d006      	beq.n	800032c <tlacitka+0x78>
 800031e:	4b15      	ldr	r3, [pc, #84]	; (8000374 <tlacitka+0xc0>)
 8000320:	881b      	ldrh	r3, [r3, #0]
 8000322:	2201      	movs	r2, #1
 8000324:	4313      	orrs	r3, r2
 8000326:	b29a      	uxth	r2, r3
 8000328:	4b12      	ldr	r3, [pc, #72]	; (8000374 <tlacitka+0xc0>)
 800032a:	801a      	strh	r2, [r3, #0]
			if (debounce == 8000){
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <tlacitka+0xc0>)
 800032e:	881a      	ldrh	r2, [r3, #0]
 8000330:	23fa      	movs	r3, #250	; 0xfa
 8000332:	015b      	lsls	r3, r3, #5
 8000334:	429a      	cmp	r2, r3
 8000336:	d102      	bne.n	800033e <tlacitka+0x8a>
				GPIOB->BSRR = (1<<0);
 8000338:	4b0c      	ldr	r3, [pc, #48]	; (800036c <tlacitka+0xb8>)
 800033a:	2201      	movs	r2, #1
 800033c:	619a      	str	r2, [r3, #24]
			}
		}
	}

	if (Tick > off_time) {	//po uplynutí doby led=0
 800033e:	4b07      	ldr	r3, [pc, #28]	; (800035c <tlacitka+0xa8>)
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	4b09      	ldr	r3, [pc, #36]	; (8000368 <tlacitka+0xb4>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	429a      	cmp	r2, r3
 8000348:	d902      	bls.n	8000350 <tlacitka+0x9c>
		GPIOB->BRR = (1<<0);
 800034a:	4b08      	ldr	r3, [pc, #32]	; (800036c <tlacitka+0xb8>)
 800034c:	2201      	movs	r2, #1
 800034e:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 8000350:	46c0      	nop			; (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	b002      	add	sp, #8
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000028 	.word	0x20000028
 800035c:	20000020 	.word	0x20000020
 8000360:	48000800 	.word	0x48000800
 8000364:	2000002c 	.word	0x2000002c
 8000368:	20000030 	.word	0x20000030
 800036c:	48000400 	.word	0x48000400
 8000370:	20000034 	.word	0x20000034
 8000374:	20000000 	.word	0x20000000

08000378 <main>:

int main(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOCEN; // enable
 800037c:	4b18      	ldr	r3, [pc, #96]	; (80003e0 <main+0x68>)
 800037e:	695a      	ldr	r2, [r3, #20]
 8000380:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <main+0x68>)
 8000382:	21e0      	movs	r1, #224	; 0xe0
 8000384:	0309      	lsls	r1, r1, #12
 8000386:	430a      	orrs	r2, r1
 8000388:	615a      	str	r2, [r3, #20]
	GPIOA->MODER |= GPIO_MODER_MODER4_0; // LED1 = PA4, output
 800038a:	2390      	movs	r3, #144	; 0x90
 800038c:	05db      	lsls	r3, r3, #23
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	2390      	movs	r3, #144	; 0x90
 8000392:	05db      	lsls	r3, r3, #23
 8000394:	2180      	movs	r1, #128	; 0x80
 8000396:	0049      	lsls	r1, r1, #1
 8000398:	430a      	orrs	r2, r1
 800039a:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER0_0; // LED2 = PB0, output
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <main+0x6c>)
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <main+0x6c>)
 80003a2:	2101      	movs	r1, #1
 80003a4:	430a      	orrs	r2, r1
 80003a6:	601a      	str	r2, [r3, #0]
	GPIOC->PUPDR |= GPIO_PUPDR_PUPDR0_0; // S2 = PC0, pullup
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <main+0x70>)
 80003aa:	68da      	ldr	r2, [r3, #12]
 80003ac:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <main+0x70>)
 80003ae:	2101      	movs	r1, #1
 80003b0:	430a      	orrs	r2, r1
 80003b2:	60da      	str	r2, [r3, #12]
	GPIOC->PUPDR |= GPIO_PUPDR_PUPDR1_0; // S1 = PC1, pullup
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <main+0x70>)
 80003b6:	68da      	ldr	r2, [r3, #12]
 80003b8:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <main+0x70>)
 80003ba:	2104      	movs	r1, #4
 80003bc:	430a      	orrs	r2, r1
 80003be:	60da      	str	r2, [r3, #12]

	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80003c0:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <main+0x68>)
 80003c2:	699a      	ldr	r2, [r3, #24]
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <main+0x68>)
 80003c6:	2101      	movs	r1, #1
 80003c8:	430a      	orrs	r2, r1
 80003ca:	619a      	str	r2, [r3, #24]

	SysTick_Config(8000); // 1ms
 80003cc:	23fa      	movs	r3, #250	; 0xfa
 80003ce:	015b      	lsls	r3, r3, #5
 80003d0:	0018      	movs	r0, r3
 80003d2:	f7ff ff07 	bl	80001e4 <SysTick_Config>

    /* Loop forever */
	for(;;) {
		blikac();
 80003d6:	f7ff ff4f 	bl	8000278 <blikac>
		tlacitka();
 80003da:	f7ff ff6b 	bl	80002b4 <tlacitka>
		blikac();
 80003de:	e7fa      	b.n	80003d6 <main+0x5e>
 80003e0:	40021000 	.word	0x40021000
 80003e4:	48000400 	.word	0x48000400
 80003e8:	48000800 	.word	0x48000800

080003ec <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003f0:	4b1a      	ldr	r3, [pc, #104]	; (800045c <SystemInit+0x70>)
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	4b19      	ldr	r3, [pc, #100]	; (800045c <SystemInit+0x70>)
 80003f6:	2101      	movs	r1, #1
 80003f8:	430a      	orrs	r2, r1
 80003fa:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 80003fc:	4b17      	ldr	r3, [pc, #92]	; (800045c <SystemInit+0x70>)
 80003fe:	685a      	ldr	r2, [r3, #4]
 8000400:	4b16      	ldr	r3, [pc, #88]	; (800045c <SystemInit+0x70>)
 8000402:	4917      	ldr	r1, [pc, #92]	; (8000460 <SystemInit+0x74>)
 8000404:	400a      	ands	r2, r1
 8000406:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000408:	4b14      	ldr	r3, [pc, #80]	; (800045c <SystemInit+0x70>)
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <SystemInit+0x70>)
 800040e:	4915      	ldr	r1, [pc, #84]	; (8000464 <SystemInit+0x78>)
 8000410:	400a      	ands	r2, r1
 8000412:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <SystemInit+0x70>)
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	4b10      	ldr	r3, [pc, #64]	; (800045c <SystemInit+0x70>)
 800041a:	4913      	ldr	r1, [pc, #76]	; (8000468 <SystemInit+0x7c>)
 800041c:	400a      	ands	r2, r1
 800041e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8000420:	4b0e      	ldr	r3, [pc, #56]	; (800045c <SystemInit+0x70>)
 8000422:	685a      	ldr	r2, [r3, #4]
 8000424:	4b0d      	ldr	r3, [pc, #52]	; (800045c <SystemInit+0x70>)
 8000426:	4911      	ldr	r1, [pc, #68]	; (800046c <SystemInit+0x80>)
 8000428:	400a      	ands	r2, r1
 800042a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800042c:	4b0b      	ldr	r3, [pc, #44]	; (800045c <SystemInit+0x70>)
 800042e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000430:	4b0a      	ldr	r3, [pc, #40]	; (800045c <SystemInit+0x70>)
 8000432:	210f      	movs	r1, #15
 8000434:	438a      	bics	r2, r1
 8000436:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEEC;
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <SystemInit+0x70>)
 800043a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800043c:	4b07      	ldr	r3, [pc, #28]	; (800045c <SystemInit+0x70>)
 800043e:	490c      	ldr	r1, [pc, #48]	; (8000470 <SystemInit+0x84>)
 8000440:	400a      	ands	r2, r1
 8000442:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <SystemInit+0x70>)
 8000446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000448:	4b04      	ldr	r3, [pc, #16]	; (800045c <SystemInit+0x70>)
 800044a:	2101      	movs	r1, #1
 800044c:	438a      	bics	r2, r1
 800044e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000450:	4b02      	ldr	r3, [pc, #8]	; (800045c <SystemInit+0x70>)
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]

}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40021000 	.word	0x40021000
 8000460:	08ffb80c 	.word	0x08ffb80c
 8000464:	fef6ffff 	.word	0xfef6ffff
 8000468:	fffbffff 	.word	0xfffbffff
 800046c:	ffc0ffff 	.word	0xffc0ffff
 8000470:	fffffeec 	.word	0xfffffeec

08000474 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000474:	480d      	ldr	r0, [pc, #52]	; (80004ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000476:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000478:	f7ff ffb8 	bl	80003ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800047c:	480c      	ldr	r0, [pc, #48]	; (80004b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800047e:	490d      	ldr	r1, [pc, #52]	; (80004b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000480:	4a0d      	ldr	r2, [pc, #52]	; (80004b8 <LoopForever+0xe>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000484:	e002      	b.n	800048c <LoopCopyDataInit>

08000486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048a:	3304      	adds	r3, #4

0800048c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800048c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800048e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000490:	d3f9      	bcc.n	8000486 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000492:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000494:	4c0a      	ldr	r4, [pc, #40]	; (80004c0 <LoopForever+0x16>)
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000498:	e001      	b.n	800049e <LoopFillZerobss>

0800049a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800049c:	3204      	adds	r2, #4

0800049e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800049e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a0:	d3fb      	bcc.n	800049a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004a2:	f000 f811 	bl	80004c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004a6:	f7ff ff67 	bl	8000378 <main>

080004aa <LoopForever>:

LoopForever:
    b LoopForever
 80004aa:	e7fe      	b.n	80004aa <LoopForever>
  ldr   r0, =_estack
 80004ac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80004b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004b8:	08000530 	.word	0x08000530
  ldr r2, =_sbss
 80004bc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004c0:	20000038 	.word	0x20000038

080004c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c4:	e7fe      	b.n	80004c4 <ADC_IRQHandler>
	...

080004c8 <__libc_init_array>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	2600      	movs	r6, #0
 80004cc:	4d0c      	ldr	r5, [pc, #48]	; (8000500 <__libc_init_array+0x38>)
 80004ce:	4c0d      	ldr	r4, [pc, #52]	; (8000504 <__libc_init_array+0x3c>)
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	10a4      	asrs	r4, r4, #2
 80004d4:	42a6      	cmp	r6, r4
 80004d6:	d109      	bne.n	80004ec <__libc_init_array+0x24>
 80004d8:	2600      	movs	r6, #0
 80004da:	f000 f819 	bl	8000510 <_init>
 80004de:	4d0a      	ldr	r5, [pc, #40]	; (8000508 <__libc_init_array+0x40>)
 80004e0:	4c0a      	ldr	r4, [pc, #40]	; (800050c <__libc_init_array+0x44>)
 80004e2:	1b64      	subs	r4, r4, r5
 80004e4:	10a4      	asrs	r4, r4, #2
 80004e6:	42a6      	cmp	r6, r4
 80004e8:	d105      	bne.n	80004f6 <__libc_init_array+0x2e>
 80004ea:	bd70      	pop	{r4, r5, r6, pc}
 80004ec:	00b3      	lsls	r3, r6, #2
 80004ee:	58eb      	ldr	r3, [r5, r3]
 80004f0:	4798      	blx	r3
 80004f2:	3601      	adds	r6, #1
 80004f4:	e7ee      	b.n	80004d4 <__libc_init_array+0xc>
 80004f6:	00b3      	lsls	r3, r6, #2
 80004f8:	58eb      	ldr	r3, [r5, r3]
 80004fa:	4798      	blx	r3
 80004fc:	3601      	adds	r6, #1
 80004fe:	e7f2      	b.n	80004e6 <__libc_init_array+0x1e>
 8000500:	08000528 	.word	0x08000528
 8000504:	08000528 	.word	0x08000528
 8000508:	08000528 	.word	0x08000528
 800050c:	0800052c 	.word	0x0800052c

08000510 <_init>:
 8000510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000516:	bc08      	pop	{r3}
 8000518:	469e      	mov	lr, r3
 800051a:	4770      	bx	lr

0800051c <_fini>:
 800051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000522:	bc08      	pop	{r3}
 8000524:	469e      	mov	lr, r3
 8000526:	4770      	bx	lr
